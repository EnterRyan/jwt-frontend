Feature-Sliced Design
src/
├── 0.assets													#이미지와 같은 정적리소스
│
├── 1.app # 애플리케이션 초기화 및 전역 설정 관련 코드
│		│			#	ex) PC/모바일 설정, 브라우저 라우터, tankstack Query 또는 리덕스 프로바이더 (전역컴포넌트의 느낌)
│   ├── providers/         
│		│	├── ProtectRouterProvider.tsx  	#라우터 프로바이더
│		│	└── DarkModeProvider.tsx				#다크모드 테머 프로바이더
│   ├── styles/
│   │ ├──base.css											#초기화 css
│   │ ├──font.css											#font설정
│   │ ├──test.css											#테스트용 css
│		│	└──theme.css										#섹상 파레트css
│   └── index.tsx          						#라우터 선언및 App 엔트리포인트
│
├── 2.pages/       										#라우트와 연결된 최종 페이지          
│	├── loginPage/
│	│		├── components/
│	│		│	└── LoginForm.tsx
│	│		├── styles/
│	│		│		├── login-form.css	#폼 디자인
│	│		│		└── layout.css			#로그인 전체 디자인
│	│		└ index.tsx							#로그인 페이지 진입점.
│	├── myPage/
│	│	├── components/
│	│	│	├── MyPageGrid.tsx			#마이페이지 레이아웃
│	│	│	├── inputForm.tsx			#text인풋
│	│	│	├── SelectForm.tsx			#셀렉트 인풋
│	│	│	└── imageBox.tsx			#사진
│	│	└ index.tsx						#마이프로필 페이지 진입점.
│	└── AdminPage/
│		├── components/
│		└ index.tsx						#관리자 페이지 진입점.
│
├── 3.widgets/
├── 4.Features/
│   └──auth/							#로그인 인증&인가
│      ├── index.ts 
│      ├── api/
│			 │	 └──PostLogin.ts				#Post 로그인 Axios 함수 
│      └──types/
│					├──LoginToken.ts				#엑세스 리프레시 토큰 타입
│					└──LoginData.ts     		#로그인 api 파라미터 데이터 타입
├── 5.entities/
│   └──user/
│       ├── userTypes.ts    			# 로그인한 사용자 정보 타입
│       └── userUtils.ts    			# 마이프로필 수정 함수    
│         
└── 6.shared/ #전역에서 재사용 가능한 공통 모듈.
	├──ui/
	│	├── layout/
	│	│	└── AppWrapper.tsx			#공통 Wrapper(배경)
	│	└── item/
	│		├──CheckBox.tsx					#공통 체크박스
	│		├──NormalInput.tsx			#일반 인풋 박스(text, pw)
	│		├──SubmitButton.tsx			#공통 서브밋 버튼
	│		└──ToggleThemeBtn.tsx		#다크모드, 라이트모드 스위칭 버튼
	├── hooks/
	├── utils/
	│	└xssFilter.ts							#로그인 및 회원정보 수정의 input 필터
	└── styles/ 	
		├──check-box.css					#공통 컴포넌트 체크박스 css	
		├──common-layout.css			#공통 wrapper 디자인
		├──normal-input.css				#공통 텍스트 인풋 디자인
		├──toggle-theme-btn.css		#테마 스위치 버튼 디자인
		└──submit-button.css			#공통 서브밋 디자인


@react-router
@react-hook-form
@type-alias
@Axios


#로그인 시나리오
1. 로그인 성공시 서버는 엑세스토큰/리프레시토큰을 둘다 리턴
2. 엑세스 토큰은 전역상태로 관리/ 리프레시 토큰은 쿠키로 저장
3. 로그아웃 이밴트 발생시 모든 토큰 제거
4. 브라우저를 닫거나 새로고침시 쿠키의 리프레시토큰을 서버에 검증 진행.(유효하지못하면 로그아웃, 유효시 메인페이지 라우팅)
5. 서버에 api를 쏠때 axios 인터페이스로 엑세스 토큰을 확인 후 만약 엑세스 토큰이 만료되었다면 엑세스토큰을 재발급 하는 api먼저 호출
6. 모든 api는 해더에 엑세스 토큰을 담아서 전달.
7.리프레시 토큰이 만료되면 로그아웃처리(모든 라우터에서 페이지 이동마다 리프레시 토큰 클라이언트 확인)
